# -*- coding: utf-8 -*-"""Modified on November 8, 2018@author: wenfu_wang"""import osimport globimport csvimport os.pathimport timeimport sysimport datetimeimport stringdef parseRsr(fileNames, curDate):    """    This function parse the input rsr files, remove redundant header lines    save the data into a .csv file    """    headerWritten = False    outputName = 'Rsr_' + date + '.csv'    # print outputName    dest = open(outputName, 'wb')  # attribute b avoids extra row in file    myWriter = csv.writer(dest)    for f in fileNames:        targetLine = False        idx = f.split(".")[0].split('_')[-1].lstrip('0')        # print idx, type(idx)        with open(f, 'rb') as myFile:            for line in myFile:                if line.startswith("  Time"):                    header = line.split(";")                    header = header[0:-1]                    headerC = [elem.strip(' .') for elem in header]                    headerC.insert(0, 'SimIdx')                    travelTimeIndex = headerC.index('Trav')                    timeFirstDownIndex = headerC.index('Time')                    headerC[timeFirstDownIndex] = "timeFirstDown"                    headerC.append('timeFirstUp')                    if not headerWritten:                        myWriter.writerow(headerC)                        headerWritten = True                    targetLine = True                    continue                if targetLine:                    row = line.split(";")                    row = row[0:-1]                    rowC = [elem.strip(' ') for elem in row]                    rowC.insert(0, idx)                    timeFirstUpVal = float(rowC[timeFirstDownIndex]) - float(rowC[travelTimeIndex])                    rowC.append(timeFirstUpVal)                    myWriter.writerow(rowC)    dest.close()def parseFzp(fileNames, curDate):    """    This function parse the input fzp files, remove redundant header lines    save the data into a .csv file    """    headerWritten = False    outputName = 'Fzp_' + date + '.csv'    # print outputName    dest = open(outputName, 'wb')  # attribute b avoids extra row in file    myWriter = csv.writer(dest)    for f in fileNames:        targetLine = False        coorLoc = -1        with open(f, 'rb') as myFile:            for line in myFile:                if line.startswith("$VEHICLE"):                    line = line.replace("$VEHICLE:", "")                    header = line.split(";")                    header = header[0:-1]                    headerC = [elem.replace("\\", "-") for elem in header]                    headerC.append('X')                    headerC.append('Y')                    headerC.append('Z')                    coorLoc = headerC.index("COORDFRONT")                    if not headerWritten:                        myWriter.writerow(headerC)                        headerWritten = True                    targetLine = True                    continue                if targetLine:                    row = line.split(";")                    row = row[0:-1]                    rowC = [elem.strip(' ') for elem in row]                    coor = rowC[coorLoc].split(" ")                    rowC.append(coor[0])                    rowC.append(coor[1])                    rowC.append(coor[2])                    myWriter.writerow(rowC)    dest.close()if __name__ == "__main__":    date = datetime.date.today()    date = str(date)    fzpFileNames = glob.glob('*.fzp')    rsrFileNames = glob.glob('*.rsr')    print 'rsr parsing...'    parseRsr(rsrFileNames, date)    print 'rsr parsing done!'    print 'fzp parsing...'    parseFzp(fzpFileNames, date)    print 'fzp parsing done!'